#!/usr/bin/env sh
# Este script Ã© utilizado como um hook do Git para realizar vÃ¡rias verificaÃ§Ãµes e formataÃ§Ãµes
# Antes de permitir um commit. As etapas incluem: executar anÃ¡lises estÃ¡ticas do cÃ³digo
# Rodar testes do Laravel, e formatar arquivos PHP modificados usando Laravel Pint.
# DependÃªncias: PHPStan, Laravel, Laravel Pint

. "$(dirname -- "$0")/_/husky.sh"

# DefiniÃ§Ã£o de cores para saÃ­da
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # Sem Cor

# FunÃ§Ã£o para imprimir mensagens com cor
echo_color() {
    printf "%b\n" "$1$2${NC}"
}

# VariÃ¡vel para rastrear status das verificaÃ§Ãµes
CHECKS=""

# Executa testes do Laravel em paralelo
echo_color "$YELLOW" "Executando testes do Laravel..."
php artisan test --parallel | php
if [ $? -ne 0 ]; then
    echo_color "$RED" "Opa! Deu ruim aqui com algum teste. Arrume antes de continuar... ðŸ˜‰"
    exit 1
else
    CHECKS="${CHECKS}\n${GREEN}âœ” Testes do Laravel"
fi

# Formata cada arquivo PHP alterado usando o Laravel Pint
echo_color "$YELLOW" "Formatando arquivos PHP modificados com Laravel Pint..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.php$" || true)

if [ -z "$STAGED_FILES" ]; then
    echo_color "$GREEN" "Nenhum arquivo PHP modificado para formatar."
else
    for FILE in $STAGED_FILES; do
        ./vendor/bin/pint "${FILE}" > /dev/null 2>&1
        git add "${FILE}"
        echo_color "$GREEN" "Formatado: ${FILE}"
    done
    CHECKS="${CHECKS}\n${GREEN}âœ” FormataÃ§Ã£o dos arquivos PHP modificados com Laravel Pint"
fi

# Exibe resumo das verificaÃ§Ãµes
echo -e "$CHECKS"
echo_color "$GREEN" "Todas as verificaÃ§Ãµes passaram. Pronto para commitar! ðŸš€"
exit 0
